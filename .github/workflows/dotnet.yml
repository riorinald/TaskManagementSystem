name: PR CI with SonarQube cloud (.NET)

on:
  push:
    branches: ["dev_a", "master"]
  pull_request:
    branches: ["dev", "master"]

jobs:
  build-and-analyze:
    name: Build and SonarCloud Analysis
    runs-on: ["self-hosted", "windows-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./TaskManagementSystem.sln

      - name: Build project
        run: dotnet build ./TaskManagementSystem.sln --no-restore --configuration Release

      - name: Run tests with coverage
        run: dotnet test ./TaskManagementSystem.sln --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/Coverage.xml

      - name: Cache SonarCloud scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          if (-Not (Test-Path ".\.sonar\scanner")) {
            New-Item -Path .\.sonar\scanner -ItemType Directory
          }
          dotnet tool install --tool-path .\.sonar\scanner dotnet-sonarscanner

      - name: SonarCloud Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"riorinald_TaskManagementSystem" `
            /o:"riorinald" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="**/Coverage.xml"

      - name: Build for Analysis
        run: dotnet build ./TaskManagementSystem.sln --no-restore --configuration Release

      - name: SonarCloud End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token=$env:SONAR_TOKEN
